services:
  # PostgreSQLデータベース
  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nestjs_app
      POSTGRES_USER: nestjs_user
      POSTGRES_PASSWORD: nestjs_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nestjs_user -d nestjs_app"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # バックエンドサービス（Nest.js）
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://nestjs_user:nestjs_password@postgres:5432/nestjs_app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    # nginxからの内部通信のみ許可（直接アクセスを防ぐ）
    expose:
      - "3001"

  # フロントエンドサービス（Next.js）
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # K8s環境と同じ/api経由でアクセス
        NEXT_PUBLIC_API_URL: /api
    container_name: frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - app-network
    # nginxからの内部通信のみ許可（直接アクセスを防ぐ）
    expose:
      - "3000"

  # nginxリバースプロキシ（K8s Ingressの役割）
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8080:80"  # ポート8080でアクセス（Kubernetes環境との競合回避）
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge